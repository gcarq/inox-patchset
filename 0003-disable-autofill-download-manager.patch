--- a/components/autofill/core/browser/autofill_download_manager.cc
+++ b/components/autofill/core/browser/autofill_download_manager.cc
@@ -399,50 +399,6 @@ AutofillDownloadManager::GetRequestURLAn
 }
 
 bool AutofillDownloadManager::StartRequest(FormRequestData request_data) {
-  net::URLRequestContextGetter* request_context =
-      driver_->GetURLRequestContext();
-  DCHECK(request_context);
-
-  // Get the URL and method to use for this request.
-  net::URLFetcher::RequestType method;
-  GURL request_url;
-  std::tie(request_url, method) = GetRequestURLAndMethod(request_data);
-
-  // Id is ignored for regular chrome, in unit test id's for fake fetcher
-  // factory will be 0, 1, 2, ...
-  std::unique_ptr<net::URLFetcher> fetcher = net::URLFetcher::Create(
-      fetcher_id_for_unittest_++, request_url, method, this,
-      GetNetworkTrafficAnnotation(request_data.request_type));
-
-  data_use_measurement::DataUseUserData::AttachToFetcher(
-      fetcher.get(), data_use_measurement::DataUseUserData::AUTOFILL);
-  fetcher->SetAutomaticallyRetryOn5xx(false);
-  fetcher->SetRequestContext(request_context);
-  fetcher->SetLoadFlags(net::LOAD_DO_NOT_SAVE_COOKIES |
-                        net::LOAD_DO_NOT_SEND_COOKIES);
-  if (method == net::URLFetcher::POST) {
-    fetcher->SetUploadData("text/proto", request_data.payload);
-  }
-
-  // Add Chrome experiment state to the request headers.
-  net::HttpRequestHeaders headers;
-  // Note: It's OK to pass SignedIn::kNo if it's unknown, as it does not affect
-  // transmission of experiments coming from the variations server.
-  variations::AppendVariationHeaders(fetcher->GetOriginalURL(),
-                                     driver_->IsIncognito()
-                                         ? variations::InIncognito::kYes
-                                         : variations::InIncognito::kNo,
-                                     variations::SignedIn::kNo, &headers);
-  fetcher->SetExtraRequestHeaders(headers.ToString());
-
-  // Transfer ownership of the fetcher into url_fetchers_. Temporarily hang
-  // onto the raw pointer to use it as a key and to kick off the request;
-  // transferring ownership (std::move) invalidates the |fetcher| variable.
-  auto* raw_fetcher = fetcher.get();
-  url_fetchers_[raw_fetcher] =
-      std::make_pair(std::move(fetcher), std::move(request_data));
-  raw_fetcher->Start();
-
   return true;
 }
 
