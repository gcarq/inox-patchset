--- a/base/base_switches.h
+++ b/base/base_switches.h
@@ -19,6 +19,7 @@
 extern const char kEnableHeapProfilingModeNative[];
 extern const char kEnableHeapProfilingTaskProfiler[];
 extern const char kEnableLowEndDeviceMode[];
+extern const char kEnableProfiler[];
 extern const char kForceFieldTrials[];
 extern const char kFullMemoryCrashReport[];
 extern const char kNoErrorDialogs[];
--- a/base/base_switches.cc
+++ b/base/base_switches.cc
@@ -34,6 +34,9 @@
 // (chrome://profiler).
 const char kEnableHeapProfilingTaskProfiler[] = "task-profiler";
 
+// Enables profiling to track threads and tasks.
+const char kEnableProfiler[] = "enable-profiler";
+
 // Generates full memory crash dump.
 const char kFullMemoryCrashReport[]         = "full-memory-crash-report";
 
--- a/base/tracked_objects.cc
+++ b/base/tracked_objects.cc
@@ -891,10 +891,16 @@
   // never again change in this process.
   ++incarnation_counter_;
 
+  const base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
+  const bool enable_profiler = cmd_line->HasSwitch(switches::kEnableProfiler);
+  ThreadData::Status initial_startup_state = DEACTIVATED;
+  if (enable_profiler)
+    initial_startup_state = kInitialStartupState;
+
   // The lock is not critical for setting status_, but it doesn't hurt.  It also
   // ensures that if we have a racy initialization, that we'll bail as soon as
   // we get the lock earlier in this method.
-  base::subtle::Release_Store(&status_, kInitialStartupState);
+  base::subtle::Release_Store(&status_, initial_startup_state);
   DCHECK(base::subtle::NoBarrier_Load(&status_) != UNINITIALIZED);
 }
 
