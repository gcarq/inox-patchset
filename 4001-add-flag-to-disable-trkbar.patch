--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -14,11 +14,6 @@
 #include "content/public/common/content_switches.h"
 #include "headless/public/headless_shell.h"
 #include "ui/gfx/switches.h"
-#if !defined(CHROME_MULTIPLE_DLL_CHILD)
-#	include "net/url_request/url_request.h"
-#	include "iridium/trknotify.h"
-#	include "base/strings/string_util.h"
-#endif
 
 #if BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
 #include "services/service_manager/runner/common/client_util.h"
@@ -50,20 +45,6 @@ int ChromeMain(int argc, const char** ar
 }
 #endif
 
-#if !defined(CHROME_MULTIPLE_DLL_CHILD)
-static void trace_url_request(const std::string &caller, const GURL &url)
-{
-	if (!base::EndsWith(url.host(), "qjz9zk", base::CompareCase::INSENSITIVE_ASCII)) {
-		if (url.scheme() != url::kTraceScheme)
-			/* Do not show infobar for non-trk URLs */
-			return;
-		if (url.is_trq())
-			return;
-	}
-	iridium::trace_url_request(caller, url);
-}
-#endif
-
 #if defined(OS_WIN)
 DLLEXPORT int __cdecl ChromeMain(HINSTANCE instance,
                                  sandbox::SandboxInterfaceInfo* sandbox_info,
@@ -125,9 +106,6 @@ int ChromeMain(int argc, const char** ar
     params.env_mode = aura::Env::Mode::MUS;
 #endif  // BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
 
-#if !defined(CHROME_MULTIPLE_DLL_CHILD)
-  net::trace_urlreq_cb = &trace_url_request;
-#endif
   int rv = content::ContentMain(params);
 
 #if defined(OS_WIN)
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -1086,6 +1086,11 @@ const FeatureEntry::FeatureVariation kOm
 //
 // When adding a new choice, add it to the end of the list.
 const FeatureEntry kFeatureEntries[] = {
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+    {"disable-trkbar", flag_descriptions::kDisableTrkbarName,
+     flag_descriptions::kDisableTrkbarDescription, kOsDesktop,
+     SINGLE_VALUE_TYPE("disable-trkbar")},
+#endif
     {"ignore-gpu-blacklist", flag_descriptions::kIgnoreGpuBlacklistName,
      flag_descriptions::kIgnoreGpuBlacklistDescription, kOsAll,
      SINGLE_VALUE_TYPE(switches::kIgnoreGpuBlacklist)},
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -279,8 +279,27 @@
 #include "chrome/browser/metrics/desktop_session_duration/desktop_session_duration_tracker.h"
 #endif
 
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+#	include "iridium/trknotify.h"
+#	include "base/strings/string_util.h"
+#endif
+
 using content::BrowserThread;
 
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+static void trace_url_request(const std::string &caller, const GURL &url)
+{
+	if (!base::EndsWith(url.host(), "qjz9zk", base::CompareCase::INSENSITIVE_ASCII)) {
+		if (url.scheme() != url::kTraceScheme)
+			/* Do not show infobar for non-trk URLs */
+			return;
+		if (url.is_trq())
+			return;
+	}
+	iridium::trace_url_request(caller, url);
+}
+#endif
+
 namespace {
 
 // A provider of Geolocation services to override AccessTokenStore.
@@ -1049,6 +1068,13 @@ int ChromeBrowserMainParts::PreCreateThr
     about_flags::ConvertFlagsToSwitches(&flags_storage,
                                         base::CommandLine::ForCurrentProcess(),
                                         flags_ui::kAddSentinels);
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+    const base::CommandLine& command_line =
+        *base::CommandLine::ForCurrentProcess();
+    if (!command_line.HasSwitch("disable-trkbar")) {
+      net::trace_urlreq_cb = &trace_url_request;
+    }
+#endif
   }
 #endif  // !defined(OS_CHROMEOS)
   // The MaterialDesignController needs to look at command line flags, which
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -336,6 +336,12 @@ const char kUiPartialSwapDescription[] =
 
 const char kDebugShortcutsName[] = "Debugging keyboard shortcuts";
 
+const char kDisableTrkbarName[] = "Disable 'Blocked request to ...' infobars";
+
+const char kDisableTrkbarDescription[] =
+    "Disables the 'Blocked request to ...' infobars that show for blocked "
+    "connection attempts to trk: schemes or the substituted domain qjz9zk.";
+
 const char kIgnoreGpuBlacklistName[] = "Override software rendering list";
 
 const char kIgnoreGpuBlacklistDescription[] =
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -397,6 +397,9 @@ extern const char kHostedAppShimCreation
 extern const char kIconNtpName[];
 extern const char kIconNtpDescription[];
 
+extern const char kDisableTrkbarName[];
+extern const char kDisableTrkbarDescription[];
+
 extern const char kIgnoreGpuBlacklistName[];
 extern const char kIgnoreGpuBlacklistDescription[];
 
