# Fix building with safe browsing disabled

--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -621,10 +621,6 @@
   // SSLCertReporter implementation
   void ReportInvalidCertificateChain(
       const std::string& serialized_report) override {
-    if (safe_browsing_ui_manager_) {
-      safe_browsing_ui_manager_->ReportInvalidCertificateChain(
-          serialized_report, base::Bind(&base::DoNothing));
-    }
   }

  private:
@@ -1532,13 +1528,9 @@
         }
       }

-      // Disable client-side phishing detection in the renderer if it is
-      // disabled in the Profile preferences or the browser process.
-      if (!prefs->GetBoolean(prefs::kSafeBrowsingEnabled) ||
-          !g_browser_process->safe_browsing_detection_service()) {
-        command_line->AppendSwitch(
-            switches::kDisableClientSidePhishingDetection);
-      }
+      // Disable client-side phishing detection.
+      command_line->AppendSwitch(
+          switches::kDisableClientSidePhishingDetection);

       if (prefs->GetBoolean(prefs::kPrintPreviewDisabled))
         command_line->AppendSwitch(switches::kDisablePrintPreview);
@@ -2077,12 +2069,8 @@
   if (expired_previous_decision)
     options_mask |= SSLErrorUI::EXPIRED_BUT_PREVIOUSLY_ALLOWED;

-  safe_browsing::SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
   std::unique_ptr<SafeBrowsingSSLCertReporter> cert_reporter(
-      new SafeBrowsingSSLCertReporter(safe_browsing_service
-                                          ? safe_browsing_service->ui_manager()
-                                          : nullptr));
+      new SafeBrowsingSSLCertReporter(nullptr));
   SSLErrorHandler::HandleSSLError(web_contents, cert_error, ssl_info,
                                   request_url, options_mask,
                                   std::move(cert_reporter), callback)
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -452,12 +452,12 @@ ProfileImpl::ProfileImpl(
       path_, sequenced_task_runner, create_mode == CREATE_MODE_SYNCHRONOUS);
 #endif

-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
-      g_browser_process->safe_browsing_service());
-  if (safe_browsing_service.get()) {
-    pref_validation_delegate_ =
-        safe_browsing_service->CreatePreferenceValidationDelegate(this);
-  }
+  //scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
+  //    g_browser_process->safe_browsing_service());
+  //if (safe_browsing_service.get()) {
+  //  pref_validation_delegate_ =
+  //      safe_browsing_service->CreatePreferenceValidationDelegate(this);
+  //}

   {
     prefs_ = chrome_prefs::CreateProfilePrefs(
--- a/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
+++ b/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
@@ -276,8 +276,7 @@ void AppendComponentUpdaterThrottles(
 }  // namespace

 ChromeResourceDispatcherHostDelegate::ChromeResourceDispatcherHostDelegate()
-    : download_request_limiter_(g_browser_process->download_request_limiter()),
-      safe_browsing_(g_browser_process->safe_browsing_service())
+    : download_request_limiter_(g_browser_process->download_request_limiter())
 #if defined(ENABLE_EXTENSIONS)
       , user_script_listener_(new extensions::UserScriptListener())
 #endif
@@ -322,8 +321,6 @@ void ChromeResourceDispatcherHostDelegate::RequestBeginning(
     content::AppCacheService* appcache_service,
     ResourceType resource_type,
     ScopedVector<content::ResourceThrottle>* throttles) {
-  if (safe_browsing_.get())
-    safe_browsing_->OnResourceRequest(request);

   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   bool is_prerendering =
@@ -488,13 +485,13 @@ void ChromeResourceDispatcherHostDelegate::AppendStandardResourceThrottles(
   content::ResourceThrottle* first_throttle = NULL;
 #if defined(OS_ANDROID)
   first_throttle = DataReductionProxyResourceThrottle::MaybeCreate(
-      request, resource_context, resource_type, safe_browsing_.get());
+      request, resource_context, resource_type, nullptr);
 #endif  // defined(OS_ANDROID)

 #if defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)
   if (!first_throttle && io_data->safe_browsing_enabled()->GetValue()) {
     first_throttle = SafeBrowsingResourceThrottle::MaybeCreate(
-        request, resource_type, safe_browsing_.get());
+        request, resource_type, nullptr);
   }
 #endif  // defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)

--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -179,7 +179,7 @@ BadClockBlockingPage* CreateBadClockBlockingPage(
                                   request_url, time_triggered_, nullptr,
                                   base::Callback<void(bool)>());
 }
-
+#if 0
 safe_browsing::SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
     content::WebContents* web_contents) {
   safe_browsing::SBThreatType threat_type =
@@ -231,7 +231,7 @@ safe_browsing::SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
       g_browser_process->safe_browsing_service()->ui_manager().get(),
       web_contents, main_frame_url, resource);
 }
-
+#endif
 #if defined(ENABLE_CAPTIVE_PORTAL_DETECTION)
 CaptivePortalBlockingPage* CreateCaptivePortalBlockingPage(
     content::WebContents* web_contents) {
@@ -320,9 +320,11 @@ void InterstitialHTMLSource::StartDataRequest(
   scoped_ptr<content::InterstitialPageDelegate> interstitial_delegate;
   if (base::StartsWith(path, "ssl", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSSLBlockingPage(web_contents_));
+  /*
   } else if (base::StartsWith(path, "safebrowsing",
                               base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSafeBrowsingBlockingPage(web_contents_));
+  */
   } else if (base::StartsWith(path, "clock", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateBadClockBlockingPage(web_contents_));
   }
--- a/chrome/browser/extensions/blacklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher.cc
@@ -35,10 +35,10 @@ BlacklistStateFetcher::~BlacklistStateFetcher() {
 void BlacklistStateFetcher::Request(const std::string& id,
                                     const RequestCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  if (!safe_browsing_config_) {
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      SetSafeBrowsingConfig(
-          g_browser_process->safe_browsing_service()->GetProtocolConfig());
+  if (true) {
+    if (false) {
+      //SetSafeBrowsingConfig(
+      //    g_browser_process->safe_browsing_service()->GetProtocolConfig());
     } else {
       base::ThreadTaskRunnerHandle::Get()->PostTask(
           FROM_HERE, base::Bind(callback, BLACKLISTED_UNKNOWN));
@@ -51,11 +51,11 @@ void BlacklistStateFetcher::Request(const std::string& id,
   if (request_already_sent)
     return;

-  if (!url_request_context_getter_ && g_browser_process &&
-      g_browser_process->safe_browsing_service()) {
-    url_request_context_getter_ =
-        g_browser_process->safe_browsing_service()->url_request_context();
-  }
+  //if (!url_request_context_getter_ && g_browser_process &&
+  //    g_browser_process->safe_browsing_service()) {
+  //  url_request_context_getter_ =
+  //      g_browser_process->safe_browsing_service()->url_request_context();
+  //}

   SendRequest(id);
 }
@@ -79,11 +79,11 @@ void BlacklistStateFetcher::SendRequest(const std::string& id) {
   fetcher->Start();
 }

-void BlacklistStateFetcher::SetSafeBrowsingConfig(
-    const safe_browsing::SafeBrowsingProtocolConfig& config) {
-  safe_browsing_config_.reset(
-      new safe_browsing::SafeBrowsingProtocolConfig(config));
-}
+//void BlacklistStateFetcher::SetSafeBrowsingConfig(
+//    const safe_browsing::SafeBrowsingProtocolConfig& config) {
+//  safe_browsing_config_.reset(
+//      new safe_browsing::SafeBrowsingProtocolConfig(config));
+//}

 void BlacklistStateFetcher::SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context) {
@@ -91,6 +91,7 @@ void BlacklistStateFetcher::SetURLRequestContextForTest(
 }

 GURL BlacklistStateFetcher::RequestUrl() const {
+  /*
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=2.2",
       safe_browsing_config_->url_prefix.c_str(),
@@ -103,6 +104,8 @@ GURL BlacklistStateFetcher::RequestUrl() const {
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
   return GURL(url);
+  */
+  return GURL();
 }

 void BlacklistStateFetcher::OnURLFetchComplete(const net::URLFetcher* source) {
--- a/chrome/browser/extensions/blacklist_state_fetcher.h
+++ b/chrome/browser/extensions/blacklist_state_fetcher.h
@@ -33,8 +33,8 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {

   virtual void Request(const std::string& id, const RequestCallback& callback);

-  void SetSafeBrowsingConfig(
-      const safe_browsing::SafeBrowsingProtocolConfig& config);
+  //void SetSafeBrowsingConfig(
+  //    const safe_browsing::SafeBrowsingProtocolConfig& config);

   void SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context);
@@ -53,8 +53,8 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {
   // ID for URLFetchers for testing.
   int url_fetcher_id_;

-  std::unique_ptr<safe_browsing::SafeBrowsingProtocolConfig>
-      safe_browsing_config_;
+  //std::unique_ptr<safe_browsing::SafeBrowsingProtocolConfig>
+  //    safe_browsing_config_;
   scoped_refptr<net::URLRequestContextGetter> url_request_context_getter_;
   scoped_refptr<net::URLRequestContextGetter> parent_request_context_for_test_;

--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -194,12 +194,12 @@ ChromeDownloadManagerDelegate::~ChromeDownloadManagerDelegate() {
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;

-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && !profile_->IsOffTheRecord()) {
-    // Include this download manager in the set monitored by safe browsing.
-    sb_service->AddDownloadManager(dm);
-  }
+  //safe_browsing::SafeBrowsingService* sb_service =
+  //    g_browser_process->safe_browsing_service();
+  //if (sb_service && !profile_->IsOffTheRecord()) {
+  //  // Include this download manager in the set monitored by safe browsing.
+  //  sb_service->AddDownloadManager(dm);
+  //}
 }

 void ChromeDownloadManagerDelegate::Shutdown() {
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -67,7 +67,6 @@
 #include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/status_icons/status_tray.h"
 #include "chrome/browser/ui/browser_dialogs.h"
@@ -196,7 +195,6 @@
       created_icon_manager_(false),
       created_notification_ui_manager_(false),
       created_notification_bridge_(false),
-      created_safe_browsing_service_(false),
       created_subresource_filter_ruleset_service_(false),
       shutting_down_(false),
       tearing_down_(false),
@@ -280,8 +278,6 @@
   // that URLFetcher operation before going away.)
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
-  if (safe_browsing_service_.get())
-    safe_browsing_service()->ShutDown();
   network_time_tracker_.reset();
 #if defined(ENABLE_PLUGIN_INSTALLATION)
   plugins_resource_service_.reset();
@@ -843,22 +839,6 @@
   return status_tray_.get();
 }

-safe_browsing::SafeBrowsingService*
-BrowserProcessImpl::safe_browsing_service() {
-  DCHECK(CalledOnValidThread());
-  if (!created_safe_browsing_service_)
-    CreateSafeBrowsingService();
-  return safe_browsing_service_.get();
-}
-
-safe_browsing::ClientSideDetectionService*
-    BrowserProcessImpl::safe_browsing_detection_service() {
-  DCHECK(CalledOnValidThread());
-  if (safe_browsing_service())
-    return safe_browsing_service()->safe_browsing_detection_service();
-  return NULL;
-}
-
 subresource_filter::RulesetService*
 BrowserProcessImpl::subresource_filter_ruleset_service() {
   DCHECK(CalledOnValidThread());
@@ -1128,16 +1108,6 @@
 #endif
 }

-void BrowserProcessImpl::CreateSafeBrowsingService() {
-  DCHECK(!safe_browsing_service_);
-  // Set this flag to true so that we don't retry indefinitely to
-  // create the service class if there was an error.
-  created_safe_browsing_service_ = true;
-  safe_browsing_service_ =
-      safe_browsing::SafeBrowsingService::CreateSafeBrowsingService();
-  safe_browsing_service_->Initialize();
-}
-
 void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
   DCHECK(!subresource_filter_ruleset_service_);
   created_subresource_filter_ruleset_service_ = true;

--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -126,9 +126,6 @@
   void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) override;
   StatusTray* status_tray() override;
-  safe_browsing::SafeBrowsingService* safe_browsing_service() override;
-  safe_browsing::ClientSideDetectionService* safe_browsing_detection_service()
-      override;
   subresource_filter::RulesetService* subresource_filter_ruleset_service()
       override;

@@ -253,9 +250,6 @@
   std::unique_ptr<BackgroundModeManager> background_mode_manager_;
 #endif

-  bool created_safe_browsing_service_;
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-
   bool created_subresource_filter_ruleset_service_;
   std::unique_ptr<subresource_filter::RulesetService>
       subresource_filter_ruleset_service_;
--- a/chrome/browser/metrics/chrome_metrics_services_manager_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_services_manager_client.cc
@@ -72,21 +72,7 @@ ChromeMetricsServicesManagerClient::GetURLRequestContext() {

 bool ChromeMetricsServicesManagerClient::IsSafeBrowsingEnabled(
     const base::Closure& on_update_callback) {
-  // Start listening for updates to SB service state. This is done here instead
-  // of in the constructor to avoid errors from trying to instantiate SB
-  // service before the IO thread exists.
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (!sb_state_subscription_ && sb_service) {
-    // It is safe to pass the callback received from the
-    // MetricsServicesManager here since the MetricsServicesManager owns
-    // this object, which owns the sb_state_subscription_, which owns the
-    // pointer to the MetricsServicesManager.
-    sb_state_subscription_ =
-        sb_service->RegisterStateCallback(on_update_callback);
-  }
-
-  return sb_service && sb_service->enabled_by_prefs();
+  return false;
 }

 bool ChromeMetricsServicesManagerClient::IsMetricsReportingEnabled() {
--- a/chrome/browser/download/download_danger_prompt.cc
+++ b/chrome/browser/download/download_danger_prompt.cc
@@ -14,7 +14,6 @@
 #include "content/public/browser/download_danger_type.h"
 #include "content/public/browser/download_item.h"

-using safe_browsing::ClientDownloadResponse;
 using safe_browsing::ClientSafeBrowsingReportRequest;

 namespace {
@@ -53,57 +52,9 @@
     ClientSafeBrowsingReportRequest::ReportType report_type,
     bool did_proceed,
     const content::DownloadItem& download) {
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  ClientSafeBrowsingReportRequest report;
-  report.set_type(report_type);
-  switch (download.GetDangerType()) {
-    case content::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
-    case content::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
-      report.set_download_verdict(ClientDownloadResponse::DANGEROUS);
-      break;
-    case content::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
-      report.set_download_verdict(ClientDownloadResponse::UNCOMMON);
-      break;
-    case content::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED:
-      report.set_download_verdict(ClientDownloadResponse::POTENTIALLY_UNWANTED);
-      break;
-    case content::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
-      report.set_download_verdict(ClientDownloadResponse::DANGEROUS_HOST);
-      break;
-    default:  // Don't send report for any other danger types.
-      return;
-  }
-  report.set_url(download.GetURL().spec());
-  report.set_did_proceed(did_proceed);
-  std::string token =
-    safe_browsing::DownloadProtectionService::GetDownloadPingToken(
-        &download);
-  if (!token.empty())
-    report.set_token(token);
-  std::string serialized_report;
-  if (report.SerializeToString(&serialized_report))
-    sb_service->SendSerializedDownloadReport(serialized_report);
-  else
-    DLOG(ERROR) << "Unable to serialize the threat report.";
 }

 void DownloadDangerPrompt::RecordDownloadDangerPrompt(
     bool did_proceed,
     const content::DownloadItem& download) {
-  int64_t file_type_uma_value =
-      safe_browsing::FileTypePolicies::GetInstance()->UmaValueForFile(
-          download.GetTargetFilePath());
-  content::DownloadDangerType danger_type = download.GetDangerType();
-
-  UMA_HISTOGRAM_SPARSE_SLOWLY(
-      base::StringPrintf("%s.%s.Shown", kDownloadDangerPromptPrefix,
-                         GetDangerTypeString(danger_type)),
-      file_type_uma_value);
-  if (did_proceed) {
-    UMA_HISTOGRAM_SPARSE_SLOWLY(
-        base::StringPrintf("%s.%s.Proceed", kDownloadDangerPromptPrefix,
-                           GetDangerTypeString(danger_type)),
-        file_type_uma_value);
-  }
 }
