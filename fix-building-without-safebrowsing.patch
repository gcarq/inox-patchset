# Fix building with safe browsing disabled

--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -592,10 +592,10 @@ class SafeBrowsingSSLCertReporter : public SSLCertReporter {
   // SSLCertReporter implementation
   void ReportInvalidCertificateChain(
       const std::string& serialized_report) override {
-    if (safe_browsing_ui_manager_) {
-      safe_browsing_ui_manager_->ReportInvalidCertificateChain(
-          serialized_report, base::Bind(&base::DoNothing));
-    }
+    //if (safe_browsing_ui_manager_) {
+    //  safe_browsing_ui_manager_->ReportInvalidCertificateChain(
+    //      serialized_report, base::Bind(&base::DoNothing));
+    //}
   }

  private:
@@ -1504,7 +1504,7 @@ void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
       // Disable client-side phishing detection in the renderer if it is
       // disabled in the Profile preferences or the browser process.
       if (!prefs->GetBoolean(prefs::kSafeBrowsingEnabled) ||
-          !g_browser_process->safe_browsing_detection_service()) {
+          !false) {
         command_line->AppendSwitch(
             switches::kDisableClientSidePhishingDetection);
       }
@@ -2037,11 +2037,11 @@ void ChromeContentBrowserClient::AllowCertificateError(
   if (expired_previous_decision)
     options_mask |= SSLErrorUI::EXPIRED_BUT_PREVIOUSLY_ALLOWED;

-  safe_browsing::SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
+  //safe_browsing::SafeBrowsingService* safe_browsing_service =
+  //    g_browser_process->safe_browsing_service();
   scoped_ptr<SafeBrowsingSSLCertReporter> cert_reporter(
-      new SafeBrowsingSSLCertReporter(safe_browsing_service
-                                          ? safe_browsing_service->ui_manager()
+      new SafeBrowsingSSLCertReporter(false
+                                          ? nullptr
                                           : nullptr));
   SSLErrorHandler::HandleSSLError(web_contents, cert_error, ssl_info,
                                   request_url, options_mask,
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -452,12 +452,12 @@ ProfileImpl::ProfileImpl(
       path_, sequenced_task_runner, create_mode == CREATE_MODE_SYNCHRONOUS);
 #endif

-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
-      g_browser_process->safe_browsing_service());
-  if (safe_browsing_service.get()) {
-    pref_validation_delegate_ =
-        safe_browsing_service->CreatePreferenceValidationDelegate(this);
-  }
+  //scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
+  //    g_browser_process->safe_browsing_service());
+  //if (safe_browsing_service.get()) {
+  //  pref_validation_delegate_ =
+  //      safe_browsing_service->CreatePreferenceValidationDelegate(this);
+  //}

   {
     prefs_ = chrome_prefs::CreateProfilePrefs(
--- a/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
+++ b/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
@@ -276,8 +276,7 @@ void AppendComponentUpdaterThrottles(
 }  // namespace

 ChromeResourceDispatcherHostDelegate::ChromeResourceDispatcherHostDelegate()
-    : download_request_limiter_(g_browser_process->download_request_limiter()),
-      safe_browsing_(g_browser_process->safe_browsing_service())
+    : download_request_limiter_(g_browser_process->download_request_limiter())
 #if defined(ENABLE_EXTENSIONS)
       , user_script_listener_(new extensions::UserScriptListener())
 #endif
@@ -322,8 +321,6 @@ void ChromeResourceDispatcherHostDelegate::RequestBeginning(
     content::AppCacheService* appcache_service,
     ResourceType resource_type,
     ScopedVector<content::ResourceThrottle>* throttles) {
-  if (safe_browsing_.get())
-    safe_browsing_->OnResourceRequest(request);

   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   bool is_prerendering =
@@ -488,13 +485,13 @@ void ChromeResourceDispatcherHostDelegate::AppendStandardResourceThrottles(
   content::ResourceThrottle* first_throttle = NULL;
 #if defined(OS_ANDROID)
   first_throttle = DataReductionProxyResourceThrottle::MaybeCreate(
-      request, resource_context, resource_type, safe_browsing_.get());
+      request, resource_context, resource_type, nullptr);
 #endif  // defined(OS_ANDROID)

 #if defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)
   if (!first_throttle && io_data->safe_browsing_enabled()->GetValue()) {
     first_throttle = SafeBrowsingResourceThrottle::MaybeCreate(
-        request, resource_type, safe_browsing_.get());
+        request, resource_type, nullptr);
   }
 #endif  // defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)

--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -179,7 +179,7 @@ BadClockBlockingPage* CreateBadClockBlockingPage(
                                   request_url, time_triggered_, nullptr,
                                   base::Callback<void(bool)>());
 }
-
+#if 0
 safe_browsing::SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
     content::WebContents* web_contents) {
   safe_browsing::SBThreatType threat_type =
@@ -231,7 +231,7 @@ safe_browsing::SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
       g_browser_process->safe_browsing_service()->ui_manager().get(),
       web_contents, main_frame_url, resource);
 }
-
+#endif
 #if defined(ENABLE_CAPTIVE_PORTAL_DETECTION)
 CaptivePortalBlockingPage* CreateCaptivePortalBlockingPage(
     content::WebContents* web_contents) {
@@ -320,9 +320,11 @@ void InterstitialHTMLSource::StartDataRequest(
   scoped_ptr<content::InterstitialPageDelegate> interstitial_delegate;
   if (base::StartsWith(path, "ssl", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSSLBlockingPage(web_contents_));
+  /*
   } else if (base::StartsWith(path, "safebrowsing",
                               base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSafeBrowsingBlockingPage(web_contents_));
+  */
   } else if (base::StartsWith(path, "clock", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateBadClockBlockingPage(web_contents_));
   }
--- a/chrome/browser/extensions/blacklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher.cc
@@ -35,10 +35,10 @@ BlacklistStateFetcher::~BlacklistStateFetcher() {
 void BlacklistStateFetcher::Request(const std::string& id,
                                     const RequestCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  if (!safe_browsing_config_) {
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      SetSafeBrowsingConfig(
-          g_browser_process->safe_browsing_service()->GetProtocolConfig());
+  if (true) {
+    if (false) {
+      //SetSafeBrowsingConfig(
+      //    g_browser_process->safe_browsing_service()->GetProtocolConfig());
     } else {
       base::ThreadTaskRunnerHandle::Get()->PostTask(
           FROM_HERE, base::Bind(callback, BLACKLISTED_UNKNOWN));
@@ -51,11 +51,11 @@ void BlacklistStateFetcher::Request(const std::string& id,
   if (request_already_sent)
     return;

-  if (!url_request_context_getter_ && g_browser_process &&
-      g_browser_process->safe_browsing_service()) {
-    url_request_context_getter_ =
-        g_browser_process->safe_browsing_service()->url_request_context();
-  }
+  //if (!url_request_context_getter_ && g_browser_process &&
+  //    g_browser_process->safe_browsing_service()) {
+  //  url_request_context_getter_ =
+  //      g_browser_process->safe_browsing_service()->url_request_context();
+  //}

   SendRequest(id);
 }
@@ -79,11 +79,11 @@ void BlacklistStateFetcher::SendRequest(const std::string& id) {
   fetcher->Start();
 }

-void BlacklistStateFetcher::SetSafeBrowsingConfig(
-    const safe_browsing::SafeBrowsingProtocolConfig& config) {
-  safe_browsing_config_.reset(
-      new safe_browsing::SafeBrowsingProtocolConfig(config));
-}
+//void BlacklistStateFetcher::SetSafeBrowsingConfig(
+//    const safe_browsing::SafeBrowsingProtocolConfig& config) {
+//  safe_browsing_config_.reset(
+//      new safe_browsing::SafeBrowsingProtocolConfig(config));
+//}

 void BlacklistStateFetcher::SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context) {
@@ -91,6 +91,7 @@ void BlacklistStateFetcher::SetURLRequestContextForTest(
 }

 GURL BlacklistStateFetcher::RequestUrl() const {
+  /*
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=2.2",
       safe_browsing_config_->url_prefix.c_str(),
@@ -103,6 +104,8 @@ GURL BlacklistStateFetcher::RequestUrl() const {
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
   return GURL(url);
+  */
+  return GURL();
 }

 void BlacklistStateFetcher::OnURLFetchComplete(const net::URLFetcher* source) {
--- a/chrome/browser/extensions/blacklist_state_fetcher.h
+++ b/chrome/browser/extensions/blacklist_state_fetcher.h
@@ -33,8 +33,8 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {

   virtual void Request(const std::string& id, const RequestCallback& callback);

-  void SetSafeBrowsingConfig(
-      const safe_browsing::SafeBrowsingProtocolConfig& config);
+  //void SetSafeBrowsingConfig(
+  //    const safe_browsing::SafeBrowsingProtocolConfig& config);

   void SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context);
@@ -53,8 +53,8 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {
   // ID for URLFetchers for testing.
   int url_fetcher_id_;

-  std::unique_ptr<safe_browsing::SafeBrowsingProtocolConfig>
-      safe_browsing_config_;
+  //std::unique_ptr<safe_browsing::SafeBrowsingProtocolConfig>
+  //    safe_browsing_config_;
   scoped_refptr<net::URLRequestContextGetter> url_request_context_getter_;
   scoped_refptr<net::URLRequestContextGetter> parent_request_context_for_test_;

--- a/chrome/browser/browsing_data/browsing_data_remover.cc
+++ b/chrome/browser/browsing_data/browsing_data_remover.cc
@@ -612,27 +612,6 @@ void BrowsingDataRemover::RemoveImpl(const TimeRange& time_range,
     storage_partition_remove_mask |=
         content::StoragePartition::REMOVE_DATA_MASK_COOKIES;

-    // Clear the safebrowsing cookies only if time period is for "all time".  It
-    // doesn't make sense to apply the time period of deleting in the last X
-    // hours/days to the safebrowsing cookies since they aren't the result of
-    // any user action.
-    if (delete_begin_ == base::Time()) {
-      safe_browsing::SafeBrowsingService* sb_service =
-          g_browser_process->safe_browsing_service();
-      if (sb_service) {
-        scoped_refptr<net::URLRequestContextGetter> sb_context =
-            sb_service->url_request_context();
-        ++waiting_for_clear_cookies_count_;
-        BrowserThread::PostTask(
-            BrowserThread::IO, FROM_HERE,
-            base::Bind(&ClearCookiesOnIOThread, delete_begin_, delete_end_,
-                       base::RetainedRef(std::move(sb_context)),
-                       UIThreadTrampoline(
-                           base::Bind(&BrowsingDataRemover::OnClearedCookies,
-                                      weak_ptr_factory_.GetWeakPtr()))));
-      }
-    }
-
     MediaDeviceIDSalt::Reset(profile_->GetPrefs());
   }

--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -194,12 +194,12 @@ ChromeDownloadManagerDelegate::~ChromeDownloadManagerDelegate() {
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;

-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && !profile_->IsOffTheRecord()) {
-    // Include this download manager in the set monitored by safe browsing.
-    sb_service->AddDownloadManager(dm);
-  }
+  //safe_browsing::SafeBrowsingService* sb_service =
+  //    g_browser_process->safe_browsing_service();
+  //if (sb_service && !profile_->IsOffTheRecord()) {
+  //  // Include this download manager in the set monitored by safe browsing.
+  //  sb_service->AddDownloadManager(dm);
+  //}
 }

 void ChromeDownloadManagerDelegate::Shutdown() {
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -62,7 +62,6 @@
 #include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/status_icons/status_tray.h"
 #include "chrome/browser/ui/browser_dialogs.h"
@@ -191,7 +190,6 @@ BrowserProcessImpl::BrowserProcessImpl(
       created_local_state_(false),
       created_icon_manager_(false),
       created_notification_ui_manager_(false),
-      created_safe_browsing_service_(false),
       shutting_down_(false),
       tearing_down_(false),
       download_status_updater_(new DownloadStatusUpdater),
@@ -268,8 +266,6 @@ void BrowserProcessImpl::StartTearDown() {
   // URLFetcher operation before going away.)
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
-  if (safe_browsing_service_.get())
-    safe_browsing_service()->ShutDown();
 #if defined(ENABLE_PLUGIN_INSTALLATION)
   plugins_resource_service_.reset();
 #endif
@@ -882,22 +878,6 @@ StatusTray* BrowserProcessImpl::status_tray() {
   return status_tray_.get();
 }

-safe_browsing::SafeBrowsingService*
-BrowserProcessImpl::safe_browsing_service() {
-  DCHECK(CalledOnValidThread());
-  if (!created_safe_browsing_service_)
-    CreateSafeBrowsingService();
-  return safe_browsing_service_.get();
-}
-
-safe_browsing::ClientSideDetectionService*
-    BrowserProcessImpl::safe_browsing_detection_service() {
-  DCHECK(CalledOnValidThread());
-  if (safe_browsing_service())
-    return safe_browsing_service()->safe_browsing_detection_service();
-  return NULL;
-}
-
 #if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
 void BrowserProcessImpl::StartAutoupdateTimer() {
   autoupdate_timer_.Start(FROM_HERE,
@@ -1151,16 +1131,6 @@ void BrowserProcessImpl::CreateBackgroundPrintingManager() {
 #endif
 }

-void BrowserProcessImpl::CreateSafeBrowsingService() {
-  DCHECK(safe_browsing_service_.get() == NULL);
-  // Set this flag to true so that we don't retry indefinitely to
-  // create the service class if there was an error.
-  created_safe_browsing_service_ = true;
-  safe_browsing_service_ =
-      safe_browsing::SafeBrowsingService::CreateSafeBrowsingService();
-  safe_browsing_service_->Initialize();
-}
-
 void BrowserProcessImpl::CreateGCMDriver() {
   DCHECK(!gcm_driver_);

--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -129,9 +129,6 @@ class BrowserProcessImpl : public BrowserProcess,
   void set_background_mode_manager_for_test(
       scoped_ptr<BackgroundModeManager> manager) override;
   StatusTray* status_tray() override;
-  safe_browsing::SafeBrowsingService* safe_browsing_service() override;
-  safe_browsing::ClientSideDetectionService* safe_browsing_detection_service()
-      override;

 #if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
   void StartAutoupdateTimer() override;
@@ -244,9 +241,6 @@ class BrowserProcessImpl : public BrowserProcess,
   scoped_ptr<BackgroundModeManager> background_mode_manager_;
 #endif

-  bool created_safe_browsing_service_;
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-
   bool shutting_down_;

   bool tearing_down_;
--- a/chrome/browser/metrics/chrome_metrics_services_manager_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_services_manager_client.cc
@@ -72,21 +72,7 @@ ChromeMetricsServicesManagerClient::GetURLRequestContext() {

 bool ChromeMetricsServicesManagerClient::IsSafeBrowsingEnabled(
     const base::Closure& on_update_callback) {
-  // Start listening for updates to SB service state. This is done here instead
-  // of in the constructor to avoid errors from trying to instantiate SB
-  // service before the IO thread exists.
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (!sb_state_subscription_ && sb_service) {
-    // It is safe to pass the callback received from the
-    // MetricsServicesManager here since the MetricsServicesManager owns
-    // this object, which owns the sb_state_subscription_, which owns the
-    // pointer to the MetricsServicesManager.
-    sb_state_subscription_ =
-        sb_service->RegisterStateCallback(on_update_callback);
-  }
-
-  return sb_service && sb_service->enabled_by_prefs();
+  return false;
 }

 bool ChromeMetricsServicesManagerClient::IsMetricsReportingEnabled() {
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -42,10 +42,6 @@ class WatchDogThread;
 class WebRtcLogUploader;
 #endif

-namespace safe_browsing {
-class SafeBrowsingService;
-}
-
 namespace variations {
 class VariationsService;
 }
@@ -107,10 +103,6 @@ namespace rappor {
 class RapporService;
 }

-namespace safe_browsing {
-class ClientSideDetectionService;
-}
-
 namespace web_resource {
 class PromoResourceService;
 }
@@ -217,14 +209,6 @@ class BrowserProcess {
   // on this platform (or this is a unit test).
   virtual StatusTray* status_tray() = 0;

-  // Returns the SafeBrowsing service.
-  virtual safe_browsing::SafeBrowsingService* safe_browsing_service() = 0;
-
-  // Returns an object which handles communication with the SafeBrowsing
-  // client-side detection servers.
-  virtual safe_browsing::ClientSideDetectionService*
-      safe_browsing_detection_service() = 0;
-
 #if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
   // This will start a timer that, if Chrome is in persistent mode, will check
   // whether an update is available, and if that's the case, restart the
--- a/chrome/browser/download/download_danger_prompt.cc
+++ b/chrome/browser/download/download_danger_prompt.cc
@@ -28,10 +28,6 @@
 #include "ui/base/l10n/l10n_util.h"

 using extensions::ExperienceSamplingEvent;
-using safe_browsing::ClientDownloadResponse;
-using safe_browsing::ClientSafeBrowsingReportRequest;
-using safe_browsing::download_protection_util::
-    GetSBClientDownloadExtensionValueForUMA;

 namespace {

@@ -316,6 +312,7 @@ DownloadDangerPrompt* DownloadDangerPrompt::Create(
 void DownloadDangerPrompt::SendSafeBrowsingDownloadRecoveryReport(
     bool did_proceed,
     const content::DownloadItem& download) {
+#if 0
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   ClientSafeBrowsingReportRequest report;
@@ -345,11 +342,13 @@ void DownloadDangerPrompt::SendSafeBrowsingDownloadRecoveryReport(
     sb_service->SendDownloadRecoveryReport(serialized_report);
   else
     DLOG(ERROR) << "Unable to serialize the threat report.";
+#endif
 }

 void DownloadDangerPrompt::RecordDownloadDangerPrompt(
     bool did_proceed,
     const content::DownloadItem& download) {
+#if 0
   int dangerous_file_type =
       GetSBClientDownloadExtensionValueForUMA(download.GetTargetFilePath());
   content::DownloadDangerType danger_type = download.GetDangerType();
@@ -364,4 +363,5 @@ void DownloadDangerPrompt::RecordDownloadDangerPrompt(
                            GetDangerTypeString(danger_type)),
         dangerous_file_type);
   }
+#endif
 }
